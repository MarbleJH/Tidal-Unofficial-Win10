#include "pch.h"
#include "TidalSchema.h"
using namespace LocalDB;
using namespace LocalDB::SchemaDefinition;
void localdata::TidalSchema::BuildSchema(SchemaBuilder & builder)
{
	builder.table("cached_track")
			.column("id", SqliteType::Int64)
				.isPrimaryKey(true)
				.nullable(false)
			.endColumn()
			.column("quality", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("server_timestamp", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("server_size", SqliteType::Int64)
				.nullable(false)
			.endColumn()		
			.column("local_size", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("last_playpack_time", SqliteType::Int64, 2)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
		.endTable()
		.table("imported_track", 3)
			.column("id", SqliteType::Int64)
				.isPrimaryKey(true)
				.nullable(false)
			.endColumn()
		
			.column("quality", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			
			.column("last_playpack_time", SqliteType::Int64)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
			.column("album_id", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("cover", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("title", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("artist", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("json", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("import_timestamp", SqliteType::Int64, 4)
				.nullable(false)
		.defaultValue("0")
			.endColumn()
		.endTable()
		.table("imported_album", 3)
			.column("id", SqliteType::Int64)
				.isPrimaryKey(true)
				.nullable(false)
			.endColumn()
			.column("cover", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("title", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("artist", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("json", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("tracks_json", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("import_timestamp", SqliteType::Int64, 4)
				.nullable(false)
		.defaultValue("0")
			.endColumn()
		.endTable()
		.table("imported_playlist", 3)
			.column("id", SqliteType::Int64)
				.isPrimaryKey(true)
				.nullable(false)
			.endColumn()
			.column("cover", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("title", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("artist", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("json", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("tracks_json", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("updated_at", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("import_timestamp", SqliteType::Int64, 4)
				.nullable(false)
					.defaultValue("0")
			.endColumn()
		.endTable()
		.table("track_import_job", 3)
			.column("id", SqliteType::Int64)
				.isPrimaryKey(true)
				.nullable(false)
			.endColumn()
			.column("server_timestamp", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("server_size", SqliteType::Int64)
				.nullable(false)
			.endColumn()		
			.column("local_size", SqliteType::Int64)
				.nullable(false)
			.endColumn()
			.column("cover", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("title", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("artist", SqliteType::Text)
				.nullable(false)
			.endColumn()
			.column("import_timestamp", SqliteType::Int64, 4)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
			.column("owning_albumid", SqliteType::Int64, 5)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
			.column("owning_playlistid", SqliteType::Int64, 5)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
			.column("quality", SqliteType::Int64, 6)
				.nullable(false)
				.defaultValue("0")
			.endColumn()
		.endTable();
			/*auto entities = LocalDB::SchemaDefinition::generateEntitiesClasses(builder.definition(), { "localdata" });
			OutputDebugStringA(entities.c_str());*/
}
